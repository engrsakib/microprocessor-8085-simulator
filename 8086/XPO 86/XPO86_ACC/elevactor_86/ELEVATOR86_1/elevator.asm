COMSEG SEGMENT
	ASSUME CS:COMSEG, DS:COMSEG, SS:COMSEG, ES:COMSEG
;DOCUMENTATION ERROR IN XPO86-SW
;PAGE 10-3 INPUT DATA TO INT 0A2H IS IN DX NOT IN DI
	
L55PORTA   EQU 8000H
L55PORTB   EQU 8002H
L55PORTC   EQU 8004H
L55CONTROL EQU 8006H


GNDLED	   	EQU	40H			;6TH BIT PORTB
FIRSTLED   	EQU	04H			;2ND BIT PORTB
SECLED	   	EQU	02H			;1ST BIT PORTA

UPLED1		EQU 20H			;5TH BIT PORTB
UPLED2		EQU 02H			;1ST BIT PORTB
UPLED3		EQU 01H			;0TH BIT PORTA

DNLED1		EQU 80H			;7TH BIT PORTB
DNLED2		EQU 08H			;3RD BIT PORTB
DNLED3		EQU 04H			;2ND BIT PORTA

;---------------------------------------------------------------------------

	ORG 0100H			;ORG FOR COM STRUCTURED PROGRAMS (ALL SEGMENTS IN ONE SEGMENT
						;AND PROGRAM MAXIMUM SIZE 64KbYTES.)
	
START:
	JMP SKIP_DATA		;SKIP OVER DATA DECLARATIONS

;---------------------------------------------------------------------------
HEADER1 DB "POSITION 0",03H
HEADER2 DB "GOING ",03H
HEADER3 DB "WAITING",03H

DIRUP  DB "UP",03H
DIRDN  DB "DN",03H
BREACH1 DB "  DANGER  ",03H
ASCIITABLE DB 30H,31H,32H,33H,34H,35H,36H,37H,38H,39H
;---------------------------------------------------------------------------
	
SKIP_DATA:
	MOV AX,10FFH
	MOV SP,AX
	
	MOV AX,0000H
	MOV SS,AX
	MOV ES,AX
	
	PUSH CS
	POP DS
	
	NOP
	NOP
	NOP	
	

	MOV DX,L55CONTROL
	MOV AL,89H
	OUT DX,AL			;CONFIGURE 8255 PORTS
	
	MOV SI,00H			;CURRENT FLOOR
	MOV DI,00H			;REQUESTED FLOOR
	MOV BL,00H			;PORTA STATUS
	MOV BH,00H			;PORTB STATUS

	OR BH,GNDLED


	CALL UPDATE_8255
	CALL DISP_FLR_DIR
NEXT_REQUEST:	

	CALL GET_FLOOR_KEY	;RETURNS FLOOR KEY IN DI
	CMP SI,DI
	JE NEXT_REQUEST
	JG CALL_GO_DOWN
	CALL GO_UP
	JMP NEXT_REQUEST
CALL_GO_DOWN:
	CALL GO_DOWN
	JMP NEXT_REQUEST
;---------------------------------------------------------------------------
GO_DOWN PROC NEAR
	CALL DISP_FLR_DIR
	OR BH,DNLED1
	OR BH,DNLED2
	OR BL,DNLED3
	CALL UPDATE_8255	;ALL DOWN LEDS ON
	
	CMP SI,01H
	JE DN_FLR10
	
DN_FLR21:
	CALL FLOOR_DELAY
	XOR BL,SECLED		;TURN OFF SECOND FLOOR LED
	CALL UPDATE_8255
						;UPDATE PORT STATUS
	CALL FLOOR_DELAY
	OR BH,FIRSTLED
	CALL UPDATE_8255
	MOV SI,01H
	CALL DELAY
	CALL DISP_FLR_DIR	
	CMP DI,0
	JNE DNFLR_REACHED
DN_FLR10:	
	CALL FLOOR_DELAY
	XOR BH,FIRSTLED		;TURN OFF FIRST FLOOR INDICATOR
	CALL UPDATE_8255
						;UPDATE PORT
	CALL FLOOR_DELAY
	OR BH,GNDLED
	CALL UPDATE_8255
	MOV SI,0H
	CALL DISP_FLR_DIR	
DNFLR_REACHED:
	XOR BH,DNLED1
	XOR BH,DNLED2
	XOR BL,DNLED3
	CALL UPDATE_8255
						;ALL DOWNLEDS ARE NOW OFF
	RET
GO_DOWN ENDP	
;---------------------------------------------------------------------------
GO_UP PROC NEAR
	CALL DISP_FLR_DIR
	
	OR BH,UPLED1
	OR BH,UPLED2
	OR BL,UPLED3
	CALL UPDATE_8255
					;ALL UP LEDS ON	
	
	CMP SI,01H
	JE UP_FLR12
UP_FLR01:
	CALL FLOOR_DELAY
	XOR BH,GNDLED
	CALL UPDATE_8255
					;GND FLOOR LED OFF
	CALL FLOOR_DELAY
	OR BH,FIRSTLED
	CALL UPDATE_8255
					;FIRST FLOOR LED ON
	MOV SI,01H
	CALL DELAY	
	CALL DISP_FLR_DIR	
	CMP DI,02H

	JNE UPFLR_REACHED
UP_FLR12:
	CALL FLOOR_DELAY
	XOR BH,FIRSTLED
	CALL UPDATE_8255
					;FIRST FLOOR LED OFF
	CALL FLOOR_DELAY
	OR BL,SECLED
	CALL UPDATE_8255
	MOV SI,02H
	CALL DISP_FLR_DIR	
					;SECOND FLOOR LED ON
	
UPFLR_REACHED:	
	XOR BH,UPLED1
	XOR BH,UPLED2
	XOR BL,UPLED3
	CALL UPDATE_8255
	
					;ALL UPLEDS ARE NOW OFF
	RET
GO_UP ENDP	
;---------------------------------------------------------------------------
GET_FLOOR_KEY PROC NEAR

WAIT_KEY:	
	MOV DX,L55PORTC
	IN AL,DX
	
	OR AL,63H			;MASK ALL OTHER BITS EXCEPT KEYS AND EMMERGENCY STOP
	CMP AL,63H
	JE WAIT_KEY
	CMP AL,0E3H
	JNE CONTINUE_KEYDET
	CALL ALARM
CONTINUE_KEYDET:	
	MOV AH,AL			;AH CONTAINS ORIGINALLY DETECTED KEYPRESS
	CALL DELAY
	MOV DX,L55PORTC
	IN AL,DX
	OR AL,63H
	CMP AL,AH
	JNE WAIT_KEY

KEY_PRESS:
;INSERT ALARM CHECK HERE
CHECK_FLOOR_KEYS:
	MOV DX,L55PORTC
	IN AL,DX
	OR AL,63H
	CMP AL,0E3H
	JNE CHECK_FLOORS
	CALL ALARM
CHECK_FLOORS:	
	CMP AL,73H			;SECOND FLOOR KEY
	JE GND_FLR
	CMP AL,6BH
	JE FIRST_FLR
	CMP AL,67H
	JE SECOND_FLR
	JMP WAIT_KEY
	
GND_FLR:
	MOV DI,00H
	JMP WAIT_RELEASE
FIRST_FLR:
	MOV DI,01H
	JMP WAIT_RELEASE
SECOND_FLR:
	MOV DI,02H
WAIT_RELEASE:
	MOV DX,L55PORTC
	IN AL,DX
	OR AL,63H
	CMP AL,0E3H
	JNE CHECK_RELEASE
	CALL ALARM
CHECK_RELEASE:
	CMP AL,63H
	JNE WAIT_RELEASE
	CALL DELAY
	MOV DX,L55PORTC
	IN AL,DX
	OR AL,63H
	CMP AL,63H
	JNE WAIT_RELEASE
	
	RET
GET_FLOOR_KEY ENDP

;---------------------------------------------------------------------------
ALARM PROC NEAR

	PUSH BX				;SAVE BX
	INT 0ACH
	LEA BX,BREACH1			;DISPLAY ALARM MESSAGE
	INT 0AFH
	POP BX					;RESTORE BX
	
ALARM_IN:	
	MOV DX,L55PORTC
	IN AL,DX
	OR AL,63H
	AND AL,80H
	JZ ALARM_OVER
FLASH_OFF:
	MOV DX,L55PORTA
	MOV AL,0FFH
	OUT DX,AL
	MOV DX,L55PORTB
	OUT DX,AL	
	MOV CX,01FFFH
ALARM1:	
	LOOP ALARM1
FLASH_ON:
	MOV DX,L55PORTA
	MOV AL,00H
	OUT DX,AL
	MOV DX,L55PORTB
	OUT DX,AL
	MOV CX,01FFFH
ALARM2:	
	LOOP ALARM2
	JMP ALARM_IN
ALARM_OVER:
	CALL DISP_FLR_DIR	
	CALL UPDATE_8255

	RET
ALARM ENDP
;---------------------------------------------------------------------------
DELAY PROC NEAR
	MOV CX,03FFH
DLY:
	LOOP DLY
	RET
DELAY ENDP
;---------------------------------------------------------------------------

FLOOR_DELAY PROC NEAR
	PUSH BX
	PUSH DI
	AND BH,0BBH			;MASK FLOOR LEDS
	AND BL,0FDH
	MOV DI,BX
	MOV AH,10H
INNER_FLR_DLY:
	
	MOV CX,0FFFH
FLR_DLY:
	MOV DX,L55PORTC
	IN AL,DX
	OR AL,63H
	CMP AL,0E3H
	JNE CONTINUE_FLR_DLY
	CALL ALARM
CONTINUE_FLR_DLY:	
	LOOP FLR_DLY
	XOR BX,DI
	CALL UPDATE_8255
	
	DEC AH
	CMP AH,00H
	JNE INNER_FLR_DLY
	POP DI
	POP BX
	CALL UPDATE_8255
	RET
FLOOR_DELAY ENDP	
;---------------------------------------------------------------------------

UPDATE_8255	PROC NEAR
	
	MOV DX,L55PORTB
	MOV AL,BH
	OUT DX,AL
	MOV DX,L55PORTA
	MOV AL,BL
	OUT DX,AL
	RET
	
UPDATE_8255 ENDP

;---------------------------------------------------------------------------
DISP_FLR_DIR PROC NEAR
	PUSH BX
	PUSH CX
	INT 0ACH
	LEA BX,HEADER1		;LINE 1 "POSITION 0"
	INT 0AFH

	MOV AX,SI
	AND AX,00FFH	
	LEA BX,ASCIITABLE
	XLAT
	AND AX,00FFH
	MOV DX,AX
	MOV AH,02H
	INT 0A2H			;"FLR"
	
	INT 0ACH			;GOTO LINE2
	LEA BX,HEADER2
	INT 0AFH			;LINE 2 "GOING "
	
	CMP SI,DI
	JE DISPLAY_RCH
	JG DISPLAY_DOWN

	LEA BX,DIRUP
	INT 0AFH
	JMP DONE_DISPLAY
DISPLAY_DOWN:
	LEA BX,DIRDN
	INT 0AFH
	JMP DONE_DISPLAY
DISPLAY_RCH:
	INT 0ABH			;GO TO START OF LINE
	LEA BX,HEADER3		;"WAITING         "
	INT 0AFH
DONE_DISPLAY:	
	POP CX
	POP BX
	RET
DISP_FLR_DIR ENDP

;---------------------------------------------------------------------------


COMSEG ENDS
END START
